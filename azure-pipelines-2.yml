name: loadbalancer-projrct 

trigger:
- main
- feature/anu**

pool: devops-pool

parameters:
  - name: environment
    displayName: Select environment
    type: string
    default: dev
    values:
      - dev
      - test
      - prod

  - name: runscanning
    displayName: Run scanning job
    type: string
    default: "true"
    values:
      - "true"
      - "false"

stages:
  - stage: terraforbuildstage
    jobs:
      - job: 
        displayName: terraform build
        steps:
        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
            backendServiceArm: 'terraform-infra'
            backendAzureRmStorageAccountName: 'stgannu2112'
            backendAzureRmContainerName: 'stgannu2112'
            backendAzureRmKey: 'dev.terraform.tfstate'
        
        - task: TerraformTask@5
          displayName: Validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        - task: CmdLine@2
          displayName: fmt
          inputs:
            script: 'terraform fmt'
            workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'

        - task: TerraformTask@5
          displayName: Plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
            environmentServiceNameAzureRM: 'terraform-infra'
            commandOptions: '-out=tfplan'
        - task: PublishPipelineArtifact@1
          displayName: publish plan
          inputs:
            targetPath: '$(Pipeline.Workspace)'
            artifact: 'tfplan'
            publishLocation: 'pipeline'
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            artifactName: 'tfplan'
            targetPath: '$(Pipeline.Workspace)'


  - stage: terraformcodescanning
    condition: eq('${{ parameters.runscanning }}', 'true')
    jobs:
      - job: tflinttfsec
        displayName: terraform testing job
        steps:
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              tflint
              # tfsec
            workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'

  - stage: validationstage
    displayName: Manual Validation
    dependsOn: 
     - terraforbuildstage
     - terraformcodescanning
    condition: succeeded()
    pool: server
    jobs:
      - job: manualvalidation
        displayName: Manual Validation
        steps:
          - task: ManualValidation@1
            timeoutInMinutes: 40
            inputs:
              notifyUsers: 'devopsannu@gmail.com'
              approvers: 'devopsannu@gmail.com'
              instructions: Please review the plan output and approve before applying.

  # - stage: terraformapply
  #   displayName: Terraform Apply
  #   dependsOn: validationstage
  #   condition: succeeded()
  #   jobs:
  #     - job: terraform_apply
  #       displayName: Terraform Apply Job
  #       steps:
  #         - task: TerraformTask@5
  #           displayName: Terraform Init
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'init'
  #             workingDirectory: '$(workdir)'
  #             backendServiceArm: 'terraform-infra'
  #             backendAzureRmStorageAccountName: 'stgannu2112'
  #             backendAzureRmContainerName: 'stgannu2112'
  #             backendAzureRmKey: 'dev.terraform.tfstate'

  #         - task: TerraformTask@5
  #           displayName: Terraform Apply
  #           inputs:
  #             provider: 'azurerm'
  #             command: 'apply'
  #             workingDirectory: '$(workdir)'
  #             commandOptions: '-auto-approve'
  #             environmentServiceNameAzureRM: 'terraform-infra'